/**
  *******************************************************************************************************************
  * @file      	xbee.c
  * @author    	B. Eng. Urban Conrad
  * @version   	V1.0
  * @date      	13.07.2016
  * @copyright 	2009 - 2016 UniBw M - ETTI - Institut 4
  * @brief   	Functions to control Xbee modul
  *******************************************************************************************************************
  * @par History:
  *  @details V1.0.0 13.07.2016 Urban Conrad
  *           - Initial version
  *******************************************************************************************************************
  */
  
//	I	N	C	L	U	D	E	S

#include "xbee.h"

__inline__ uint8_t XBEE_FRAME_CHECKSUM(uint8_t* frameData, uint8_t lenghtOfDataInBytes)
{
	if(frameData == NULL || lenghtOfDataInBytes < 1)
	{
		return 0xff;
	} else {
		uint16_t sum = 0x0000;
		uint8_t i = 0;
		for(i = 0; i < lenghtOfDataInBytes; i++)
		{
			sum = sum + frameData[i];
		}
		return (0xff - (sum & 0xff));
	}
}

uint8_t create_xbee_frame(uint16_t xbee_addr, uint8_t *xbee_frame, uint8_t daten[], uint16_t length){

	uint32_t i;
	uint16_t data_length;
	uint8_t msb_length;
	uint8_t lsb_length;
	uint8_t msb_addr;
	uint8_t lsb_addr;
	
	//Datenlange der Payload wird um 5 erhoet fuer die berechung der Checksumme
	data_length = length + 5;

	//lsb_length und msb_length werden fuer den Frame erstellet
	lsb_length = data_length;
	msb_length = (data_length >> 8);

	//lsb_addr und msb_addr werden fuer den Frame erstellet
	lsb_addr = xbee_addr;
	msb_addr = (xbee_addr >> 8);

	//erstellen des XBee Frames bis zur Payload
	xbee_frame[0] = 0x7E;
	xbee_frame[1] = msb_length;
	xbee_frame[2] = lsb_length;
	xbee_frame[3] = 0x01;			//Transmitrequest 16bit
	xbee_frame[4] = 0x01;
	xbee_frame[5] = msb_addr;
	xbee_frame[6] = lsb_addr;
	xbee_frame[7] = 0x00;

	//Hinzufuegn der Payload zum XBee Frame
	for(i = 0; i < length; i++){
		xbee_frame[i + 8] = daten[i];
	}

	//Berechnen der Checksumme und hinzufuegen zum XBee Frame
	xbee_frame[length + 8] = XBEE_FRAME_CHECKSUM(&xbee_frame[3], data_length);

	//Pruefen ob Checksumme nict 0xFF sonst fehler
	if(xbee_frame[length + 8] == 0xFF)
		return 1;

	return 0;
}

uint8_t xbee_tx(volatile uint32_t *base_addr, uint16_t xbee_addr, uint8_t daten[], uint16_t length){

	uint8_t xbee_frame[109];
	uint16_t length_payload;
	uint32_t i, j = 0;

	do{

		if(length > 100){
			length_payload = 100;
			length = length - 100;
		} else {
			length_payload = length;
			length = 0;
		}

		//Erstellen des XBee Frames mit Fehlerabrage
		if(create_xbee_frame(xbee_addr, xbee_frame, daten[(j * 100) - 1], length_payload) == 1)
			return 1;

		//Schreiben an UART
		for(i = 0; i < length_payload + 9; i++){

			alt_write_word(base_addr + 0x1, xbee_frame[i]);
		
		}

	}while (length > 0);

	return 0;
}

int16_t xbee_rx(volatile uint32_t *base_addr, uint8_t rx_xbee_daten[]){

	uint16_t fifo_used = 0;
	uint32_t i;

	//Einschlaten des GAP
	alt_write_word(base_addr + 0x3, 0x2000);

	do{

		//Falls der Interrupt fuer GAP gesetzt ist
		if( (alt_read_word(base_addr + 0x2) & 0x2000) >>13 ){

			//Pruefe wie voll das FIFO ist
			fifo_used = alt_read_word(base_addr + 0x6);

			//Speichere die Daten in das Uebergebene Array
			for(i = 0; i < fifo_used; i++){

				rx_xbee_daten[i] = alt_read_word(base_addr);

			}

			//Setze den Interrupt zurueck
			alt_write_word(base_addr + 0x2, 0x2000);

		}

	//Solange fifo_used = 0 wurden keine Daten empfangen
	}while( fifo_used == 0 );

	//Zurueckgeben der empfangenen Bytes
	return fifo_used;
}
